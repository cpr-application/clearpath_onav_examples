#! /usr/bin/env python3

from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_navigation_msgs.msg import Task
import time


UNSPECIFIED_HEADING = -1


class MissionWithWaitTask(RosNode):
    """Create and run a mission with 2 waypoints, each of which executes a "wait" task.

    Our goal is to set up two waypoints, Waypoint A at (50.1095255, -97.3192484)
    and Waypoint B at (50.1094938, -97.3191085), then create a mission such
    that the robot drives to Waypoint A, then to Waypoint B. In addition, at the last
    waypoint, the "wait" task will be called to add a delay before proceeding.
    Note that the "wait" task is a built-in task for OutdoorNav, so the
    server to support the waiting is already running and does not need to be launched here.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    def __init__(self):
        """Initialize the mission details and server connection."""

        RosNode.__init__(self, 'mission_with_wait_task')
        wait_task = Task()
        wait_task.name = "my_wait_task"        # choose any name here
        wait_task.uuid = "uuid-task-1"         # choose unique value here
        wait_task.action_server_name = "/wait" # must match task (existing/custom) server name
        wait_task.version = "1.0"              # choose any version
        wait_task.floats = [10.0]              # wait for 10 seconds
        wait_task.strings = []                 # no string parameters for the wait task
        waypoints = [
            Waypoint("W_A", "uuid-waypoint-01", 50.1095255, -97.3192484, UNSPECIFIED_HEADING),
            Waypoint("W_B", "uuid-waypoint-02", 50.1094938, -97.3191085, UNSPECIFIED_HEADING, [wait_task]),
        ]
        self.mission = Mission("Wait task mission", "uuid-mission-1", waypoints)

    def run(self):
        """Execute the mission."""

        if not self.mission.startMission():
            return False
        while not self.mission.isMissionComplete():
            time.sleep(1.0)
        return self.mission.getMissionSuccess()


if __name__ == '__main__':
    if MissionWithWaitTask().run():
        print("Mission completed successfully")
    else:
        print("Mission failed")
