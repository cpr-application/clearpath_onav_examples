#! /usr/bin/env python3

import rospy
import actionlib
from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_navigation_msgs.msg import Task, UITaskResult, UITaskAction
import time


CUSTOM_ACTION_NAME = "/inspect_solar_panel"
UNSPECIFIED_HEADING = -1


class InspectionMission1(RosNode):
    """Create and run an inspection mission.

    This mission navigates along one row of solar panels and stops at
    two of them for an inspection. At present, simulate an inspection
    through a placeholder custom task that simply logs some information.
    In a real mission, the user can substitute the placeholder with
    their own custom task.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    def __init__(self):
        """Initialize the mission details and server connection."""

        RosNode.__init__(self, 'inspection_mission_1')

        custom_task_a = Task()
        custom_task_a.name = "my_custom_task_a"                  # choose any name here
        custom_task_a.action_server_name = CUSTOM_ACTION_NAME          # must match server name
        custom_task_a.version = "1.0"                            # choose any version
        custom_task_a.floats = [26]                              # param: unique panel ID
        custom_task_a.strings = ["Operating normally"]           # param: status

        custom_task_b = Task()
        custom_task_b.name = "my_custom_task_a"                  # choose any name here
        custom_task_b.action_server_name = CUSTOM_ACTION_NAME          # must match server name
        custom_task_b.version = "1.0"                            # choose any version
        custom_task_b.floats = [21]                              # param: unique panel ID
        custom_task_b.strings = ["Fault detected"]               # param: status


        waypoints = [
            Waypoint("W01", "uuid-waypoint-01", 50.10950277799165, -97.3189856811192),
            Waypoint("W02", "uuid-waypoint-02", 50.10949391137214, -97.3189058815436),
            Waypoint("W03", "uuid-waypoint-03", 50.10951903346074, -97.3188674595257),
            Waypoint("W04", "uuid-waypoint-04", 50.10956041101844, -97.3189014482338),
            Waypoint("W05", "uuid-waypoint-05", 50.10959292195662, -97.3189886366590),
            Waypoint("W06", "uuid-waypoint-06", 50.10962543289481, -97.3190595696150),
            Waypoint("W07", "uuid-waypoint-07", 50.10965203275334, -97.3191408469605),
            Waypoint("W08", "uuid-waypoint-08", 50.10967272153218, -97.3192029132971),
            Waypoint("W09", "uuid-waypoint-09", 50.10969341031103, -97.3192812351027),
            Waypoint("W10", "uuid-waypoint-10", 50.10970227693053, -97.3193447792092),
            Waypoint("W11", "uuid-waypoint-11", 50.10972001016954, -97.3194127566254),
            Waypoint("W12", "uuid-waypoint-12", 50.10972592124922, -97.31947777850179, UNSPECIFIED_HEADING, [custom_task_a]),
            Waypoint("W13", "uuid-waypoint-13", 50.1097347878687, -97.3195531447676),
            Waypoint("W14", "uuid-waypoint-14", 50.1097362656386, -97.3196403331927),
            Waypoint("W15", "uuid-waypoint-15", 50.1097406989484, -97.3196876218301),
            Waypoint("W16", "uuid-waypoint-16", 50.1097451322581, -97.3197688991755),
            Waypoint("W17", "uuid-waypoint-17", 50.1097495655679, -97.3198339210519),
            Waypoint("W18", "uuid-waypoint-18", 50.1097495655679, -97.31992702055676, UNSPECIFIED_HEADING, [custom_task_b]),
            Waypoint("W19", "uuid-waypoint-19", 50.1097495655679, -97.32002012006157),
            Waypoint("W20", "uuid-waypoint-20", 50.1097081880102, -97.32004228661035),
            Waypoint("W21", "uuid-waypoint-21", 50.1096594216029, -97.32003785330059),
            Waypoint("W22", "uuid-waypoint-22", 50.1096446439037, -97.31999056466323),
            Waypoint("W23", "uuid-waypoint-23", 50.109505733531485, -97.31903149198665)
        ]
        self.mission = Mission("Mission 1", "uuid-mission-1", waypoints)
        self._initCustomTaskServer()

    def _initCustomTaskServer(self):
        """Creates a ROS actionlib server that executes the custom task when triggered.

        This actionlib server gets launched at startup and waits for a message to indicate
        when it is time to perform the custom task.
        """

        self._custom_task_server = actionlib.SimpleActionServer(
                CUSTOM_ACTION_NAME,
                UITaskAction,
                execute_cb=self._executeCustomTask,
                auto_start=False)
        self._custom_task_server.start()

    def _executeCustomTask(self, goal):
        """Callback that is executed by the server when a custom task message is received.

        In this example, this callback logs information based on the parameters.

        Parameters
        ----------
        goal : UITaskActionGoal
            The parameters for the goal to be executed. In this example, goal.floats[0]
            contains an ID and strings[0] contains the status message.
        """

        msg = "Solar Panel ID: %f Status: %s" % (goal.floats[0], goal.strings[0])
        rospy.loginfo(msg)
        result = UITaskResult()
        result.success = True
        self._custom_task_server.set_succeeded(result)

    def run(self):
        """Execute the mission."""

        if not self.mission.startMission():
            return False
        while not self.mission.isMissionComplete():
            time.sleep(1.0)
        return self.mission.getMissionSuccess()


if __name__ == '__main__':
    if InspectionMission1().run():
        print("Mission completed successfully")
    else:
        print("Mission failed")
