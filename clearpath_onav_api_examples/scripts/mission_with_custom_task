#! /usr/bin/env python3

import rospy
import actionlib
from clearpath_onav_api_examples_lib.coordinate_lat_lon import CoordinateLatLon
from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_navigation_msgs.msg import Task, UITaskResult, UITaskAction
from sensor_msgs.msg import NavSatFix
import time
from threading import Lock


CUSTOM_ACTION_NAME = "/record_waypoint_info"
UNSPECIFIED_HEADING = -1


class MissionWithCustomTask(RosNode):
    """Create and run a mission with 3 waypoints, each of which executes a custom task.

    Our goal is to set up 3 waypoints, then create a mission such that the robot drives
    to each waypoint in order. In addition, at each of the waypoints, a custom task will be
    called to record the timestamp, goal name, and GPS coordinates. Since this is a custom task,
    it is necessary to create an actionlib server to implement the custom task.

    There are three main components to this examples, as outlined in the subclasses below:
    1. The actionlib server that is waiting to execute the custom task, once it receives a
       message indicating that it is the appropriate time to execute the task. While a simple
       implementation is provided here, practical implementations are likely more complex.
       For clarity, the actionlib server is the code that performs the custom task and, other
       than in this example, will need to be implemented by the end user.
    2. A ROS subscriber that tracks the latest value of the GPS coordinates. These coordinates
       are then available for use in the custom task. ROS subscriptions are not required for
       all custom tasks, but are shown here for reference.
    3. The mission builder, which builds up the set of goals, including information on the
       custom tasks, and runs the mission, include calls to the actionlib server (item #1 above)
       to execute the custom task.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    class TaskServer:
        """Creates a ROS actionlib server that executes the custom task when triggered.

        This actionlib server gets launched at startup and waits for a message to indicate
        when it is time to perform the custom task. When triggered, this custom task
        records information to a file. It shows how to access parameters from the
        mission message (see 'goal.floats[]' and 'goal.strings[]') as well as information
        from the GPS subscription.
        """

        def __init__(self, callback):
            """Sets up and starts the actionlib server.

            Parameters
            ----------
            callback : fn(UITaskActionGoal)
                The callback function to be executed when the goal message is received. It
                takes the one parameter, which contains the parameters for the goal to be
                executed.

            See also MissionWithCustomTask._recordActionCallback().
            """

            self._callback = callback
            self._result = UITaskResult()
            self._action_server = actionlib.SimpleActionServer(
                    CUSTOM_ACTION_NAME,
                    UITaskAction,
                    execute_cb=self._executeCallback,
                    auto_start=False)
            self._action_server.start()

        def _executeCallback(self, goal):
            """Callback that gets executed when a goal message is received.

            This callback is executed on a separate actionlib thread. This example
            always calls "set_succeeded(result)": 'set_succeeded' updates the state
            of the action server so that the mission knows that the custom task was
            executed successfully; 'result' is an optional parameter that will be
            sent back to the navigation engine and should be '{ success: True }' as
            shown. To indicate a failure, use "set_preempted()" or "set_aborted()"
            instead of "set_succeeded()".

            Parameters
            ----------
            goal : UITaskActionGoal
                The parameters for the goal to be executed
            """

            self._callback(goal)
            result = UITaskResult()
            result.success = True
            self._action_server.set_succeeded(result)

    class GpsSubscriber:
        """Creates a ROS subscriber that tracks the latest GPS position."""

        def __init__(self, callback):
            """Subscribes for GPS coordinate updates

            Parameters
            ----------
            callback : fn(NavSatFix)
                The callback function to be executed when the GPS topic is updated.
            """

            self._sub = rospy.Subscriber("/navsat/fix_throttle", NavSatFix, callback)

    class MissionBuilder:
        """Creates and runs the mission, including custom tasks."""

        def __init__(self):
            """Creates the mission with 3 waypoints and custom tasks."""

            # First waypoint, with custom task
            waypoint_a_name = "A"
            custom_task_a = Task()
            custom_task_a.name = "my_custom_task_a"             # choose any name here
            custom_task_a.action_server_name = CUSTOM_ACTION_NAME     # must match server name
            custom_task_a.version = "1.0"                       # choose any version
            custom_task_a.floats = [1000]                       # param: unique ID
            custom_task_a.strings = [waypoint_a_name]           # param: goal name

            # Second waypoint, with custom task
            waypoint_b_name = "B"
            custom_task_b = Task()
            custom_task_b.name = "my_custom_task_b"             # choose any name here
            custom_task_b.action_server_name = CUSTOM_ACTION_NAME     # must match server name
            custom_task_b.version = "1.0"                       # choose any version
            custom_task_b.floats = [1001]                       # param: unique ID
            custom_task_b.strings = [waypoint_b_name]           # param: goal name

            # Third waypoint, with custom task
            waypoint_c_name = "C"
            custom_task_c = Task()
            custom_task_c.name = "my_custom_task_c"             # choose any name here
            custom_task_c.action_server_name = CUSTOM_ACTION_NAME     # must match server name
            custom_task_c.version = "1.0"                       # choose any version
            custom_task_c.floats = [1002]                       # param: unique ID
            custom_task_c.strings = [waypoint_c_name]           # param: goal name

            waypoints = [
                Waypoint(waypoint_a_name, "uuid-waypoint-01", 50.1095255, -97.3192484, UNSPECIFIED_HEADING, [custom_task_a]),
                Waypoint(waypoint_b_name, "uuid-waypoint-02", 50.1094938, -97.3191085, UNSPECIFIED_HEADING, [custom_task_b]),
                Waypoint(waypoint_c_name, "uuid-waypoint-03", 50.1094600, -97.3192100, UNSPECIFIED_HEADING, [custom_task_c]),
            ]

            # Build mission from two waypoints with custom tasks
            self._mission = Mission("Custom task mission", "uuid-mission-1", waypoints)

        def getMission(self):
            """Gets a reference to the mission.

            Returns
            -------
            A reference to the mission.
            """
            return self._mission

    def __init__(self):
        """Initializes ROS, the custom task server, GPS subscriber and mission."""

        RosNode.__init__(self, 'mission_with_custom_task')
        self._record_waypoint_server = MissionWithCustomTask.TaskServer(
                self._recordActionCallback)
        self._gps_subscriber = MissionWithCustomTask.GpsSubscriber(self._gpsSubscriberCallback)
        self._mission_builder = MissionWithCustomTask.MissionBuilder()
        self._gps_coordinates = CoordinateLatLon(0.0, 0.0)
        self._gps_coordinates_lock = Lock()

    def _recordActionCallback(self, goal):
        """Callback that is executed by the server when a custom task message is received.

        In this example, this callback records information to a file using inputs from both
        the parameters and from the GPS subscription.

        Parameters
        ----------
        goal : UITaskActionGoal
            The parameters for the goal to be executed. In this example, goal.floats[0]
            contains an ID and strings[0] contains the goal name.
        """

        msg = ""
        with self._gps_coordinates_lock:
            msg = "ID: %f Name: %s Latitude: %f Longitude: %f" % (
                goal.floats[0], goal.strings[0],
                self._gps_coordinates.getLat(), self._gps_coordinates.getLon())
        rospy.loginfo(msg)
        with open('/tmp/waypoint_positions.txt', 'a') as out_file:
            out_file.write(msg + '\n')

    def _gpsSubscriberCallback(self, msg):
        """Callback that is executed when the subscriber reports GPS updates.

        In this example, this callback saves the updated coordinates, for use by
        another function.

        Parameters
        ----------
        msg : NavSatFix
            Contains the updated GPS latitude and longitude.
        """

        with self._gps_coordinates_lock:
            self._gps_coordinates = CoordinateLatLon(msg.latitude, msg.longitude)

    def run(self):
        """Execute the mission.

        This function blocks until the mission is complete.

        Returns
        -------
        True on successful execution of the mission; else False on any error.
        """

        if not self._mission_builder.getMission().startMission():
            return False
        while not self._mission_builder.getMission().isMissionComplete():
            time.sleep(1.0)
        return self._mission_builder.getMission().getMissionSuccess()


if __name__ == '__main__':
    if MissionWithCustomTask().run():
        print("Mission completed successfully")
    else:
        print("Mission failed")
    rospy.signal_shutdown('Done')
