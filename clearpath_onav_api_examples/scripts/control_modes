#! /usr/bin/env python3

import rospy
from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_onav_api_examples_lib.services import Services
from clearpath_onav_api_examples_lib.control_status import ControlStatusMonitor
from clearpath_control_msgs.msg import ControlMode
from geometry_msgs.msg import Twist


class ControlModes(RosNode):
    """Toggle between the AUTONOMY and MANUAL control modes.

    Note that autonomous missions will only run when the system is in AUTONOMY
    mode.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    def __init__(self):
        """Initialize the mission details and server connection."""

        RosNode.__init__(self, 'control_modes')
        waypoints = [
            Waypoint("A", "uuid-waypoint-1", 50.1094938, -97.3191085),
            Waypoint("B", "uuid-waypoint-2", 50.1095100, -97.3192000),
            Waypoint("C", "uuid-waypoint-3", 50.1095255, -97.3192484),
        ]
        self.mission = Mission("Control modes mission", "uuid-mission-1", waypoints)
        self._control_status = ControlStatusMonitor()
        self._cmd_vel_pub = rospy.Publisher('/joy_teleop/cmd_vel', Twist, queue_size=10)

    def _turnRight(self):
        """Make a right hand turn in manual mode."""

        msg = Twist()
        msg.linear.x = 0.8
        msg.linear.y = 0
        msg.linear.y = 0
        msg.angular.x = 0
        msg.angular.y = 0
        msg.angular.z = -0.3
        for i in range(80):
            self._cmd_vel_pub.publish(msg)
            rospy.sleep(0.1)
        msg.linear.x = 0
        msg.angular.z = 0
        self._cmd_vel_pub.publish(msg)

    def run(self):
        """Execute the mission."""

        # Ensure the system in in autonomy mode
        if not Services.setMode(ControlMode.AUTONOMY):
            rospy.logerr("Failed to switch to autonomy mode")
            return False

        # Switch to manual mode
        if not Services.setMode(ControlMode.MANUAL):
            rospy.logerr("Failed to switch to manual mode")
            return False
        # Wait for the updates to be applied
        rospy.sleep(1.0)
        # Check that the state has been updated
        if self._control_status.getAutonomyEnabled():
            rospy.logerr("Autonomy is still enabled but expecting manual mode")
            return False
        if self._control_status.getCurrentMode() != ControlMode.MANUAL:
            rospy.logerr("Control mode is %d, expected %d" % (
                self._control_status.getCurrentMode(), ControlMode.MANUAL))
            return False

        # In a real application, something useful would be done
        # while in MANUAL mode

        # Switch back to autonomy mode
        if not Services.setMode(ControlMode.AUTONOMY):
            rospy.logerr("Failed to switch to autonomy mode")
            return False
        # Wait for the updates to be applied
        rospy.sleep(1.0)
        # Check that the state has been updated
        if not self._control_status.getAutonomyEnabled():
            rospy.logerr("Autonomy mode is not enabled but should be")
            return False
        if self._control_status.getCurrentMode() != ControlMode.AUTONOMY:
            rospy.logerr("Control mode is %d, expected %d" % (
                self._control_status.getCurrentMode(), ControlMode.AUTONOMY))
            return False

        # Run a simple mission
        if not self.mission.startMission():
            rospy.logerr("Failed to start mission")
            return False
        while not self.mission.isMissionComplete():
            rospy.sleep(1.0)
        return self.mission.getMissionSuccess()


if __name__ == '__main__':
    if ControlModes().run():
        print("Mission completed successfully")
    else:
        print("Mission failed")
