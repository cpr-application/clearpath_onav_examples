#! /usr/bin/env python3

import rospy
from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_onav_api_examples_lib.services import Services
from geometry_msgs.msg import Twist


# The name of the topic for driving the robot. This needs to match the CPR OutdoorNav API.
CMD_VEL_TOPIC_NAME = "/joy_teleop/cmd_vel"


class PauseMission(RosNode):
    """Run 'simple_mission_1', but pause it part way through execution.

    While the mission is paused, make a right hand turn (eg. teleop), then
    resume the original mission, replanning as needed based on the current
    robot position.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    def __init__(self):
        """Initialize the mission details and server connection."""

        RosNode.__init__(self, 'pause_mission')
        waypoints = [
            Waypoint("A", "uuid-waypoint-1", 50.1094938, -97.3191085),
            Waypoint("B", "uuid-waypoint-2", 50.1095100, -97.3192000),
            Waypoint("C", "uuid-waypoint-3", 50.1095255, -97.3192484),
        ]
        self.mission = Mission("Pause mission", "uuid-mission-1", waypoints)
        self._cmd_vel_pub = rospy.Publisher(CMD_VEL_TOPIC_NAME, Twist, queue_size=10)

    def _turnRight(self):
        """Make a right hand turn in manual mode."""

        msg = Twist()
        msg.linear.x = 0.8
        msg.linear.y = 0
        msg.linear.y = 0
        msg.angular.x = 0
        msg.angular.y = 0
        msg.angular.z = -0.3
        for i in range(20):
            self._cmd_vel_pub.publish(msg)
            rospy.sleep(0.1)
        msg.linear.x = 0
        msg.angular.z = 0
        self._cmd_vel_pub.publish(msg)

    def run(self):
        """Execute the mission, then pause it after 10 seconds."""

        # If the previous mission was aborted while in the paused state, you might
        # need to uncomment the following line
        # Services.resumeMission()

        # Start the mission
        if not self.mission.startMission():
            rospy.logerr("Failed to start mission")
            return False
        # Wait 10 seconds before pausing the mission
        start_time = rospy.get_time()
        while not self.mission.isMissionComplete() and rospy.get_time() - start_time < 10.0:
            rospy.sleep(1.0)
        # Expect that the mission is not complete, since it was paused early
        if self.mission.isMissionComplete():
            rospy.logerr("Mission completed unexpectedly")
            return False
        # Now, pause the mission
        if not Services.pauseMission():
            rospy.logerr("Failed to pause mission")
            return False
        rospy.loginfo("Mission paused")
        # Make a turn in manual mode
        rospy.loginfo("Using teleop to drive robot manually")
        self._turnRight()
        # Resume the mission; this will typically require a new path
        # to get generated by the system after driving off course in teleop mode
        if not Services.resumeMission():
            rospy.logerr("Failed to resume mission")
            return False
        rospy.loginfo("Mission resumed")
        while not self.mission.isMissionComplete():
            rospy.sleep(1.0)
        return self.mission.getMissionSuccess()


if __name__ == '__main__':
    if PauseMission().run():
        print("Mission completed successfully")
    else:
        print("Mission failed")
