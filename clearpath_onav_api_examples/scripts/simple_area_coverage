#! /usr/bin/env python3

import rospy
import actionlib
from clearpath_onav_api_examples_lib.coordinate_lat_lon import CoordinateLatLon
from clearpath_onav_api_examples_lib.coordinate_xy import CoordinateXY
from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.waypoint import Waypoint
from clearpath_onav_api_examples_lib.mission import Mission
from clearpath_navigation_msgs.msg import Task, UITaskResult, UITaskAction
from nav_msgs.msg import Odometry
from std_msgs.msg import UInt8
import time
import random
import threading
from threading import Lock

# The name of the custom task for starting/stopping the simulated scanner
CUSTOM_ACTION_NAME = "/start_stop_scanner"

# The coordinates bounding the area to be searched. The current implementation
# supports only four coordinates
SEARCH_AREA_COORDINATES = [CoordinateLatLon(50.109471808180770, -97.31988860464040),
                           CoordinateLatLon(50.109606658360920, -97.31988388549236),
                           CoordinateLatLon(50.109598563981100, -97.31932471719036),
                           CoordinateLatLon(50.109463713839425, -97.31932943790719)]

# The position of the datum for the above search area
SEARCH_AREA_DATUM = CoordinateLatLon(50.109461, -97.318978)

# The spacing between the search rows, in metres. This will be correlated to
# the scanner range, to ensure there is at least slight overlap between the
# search rows
SEARCH_ROW_SPACING = 5.0

# The simulated scanner reports a value from 0-100, with high values indicating
# a higher likelihood of a "detection". Higher thresholds will result in fewer
# values being reported at the end of the mission.
SCANNER_MINIMUM_REPORTING_THRESHOLD = 90

# The topic on which the simulated scanner readings are published
SCANNER_TOPIC = "/scanner_reading"


class SimpleAreaCoverage(RosNode):
    """Perform an exhaustive "search" in a quadrilateral, defined by its four lat/lon coordinates.

    User Workflow:
    1. Using an external tool, the user identifies a quadrilateral in which an
       exhaustive search is to be performed and provides the latitude/longitude
       of those four vertices in SEARCH_AREA_COORDINATES above.
    2. The user identifies the spacing between search rows and updates SEARCH_ROW_SPACING above.
       The user should ensure that the range of the scanner is sufficient to ensure overlap between
       rows.
    3. The user runs the "search" by calling the "run()" function.
    4. The user reviews the printout of the results.

    The main components to this example, as outlined in the subclasses below, are:
    1. The AreaCoverageBuilder class, which generates the "exhaustive search" waypoints, based on
       the bounding quadrilateral.
    2. The SimulatedScanner class, which simulates a real hardware device that would detect
       something in the environment and publish that to a ROS topic.
    3. The StartStopScannerServer class, which is the actionlib server that is waiting to execute
       the start and stop custom tasks, once it receives a message indicating that it is the
       appropriate time to execute the task.
    4. The RobotPositionSubscriber class, which monitors and records the current position of the
       robot.
    5. The ScannerSubscriber class, which receives updates from the scanner, compares them
       against the threshold, and records them in a list if above the threshold, along with
       the current robot position.
    6. The MissionBuilder class, which builds up the mission and makes it ready to run.

    The coordinates used in this example are based on the cpr_agriculture_gazebo
    world and should be updated to match the location in which the user's
    robot will be operating.
    """

    class AreaCoverageBuilder():
        """
        Create the sequence of points for a simple area coverage algorithm where the primary
        direction of robot travel is north or south. The area to be covered is a quadrilateral
        defined by its four vertices such at the first vertex is the most westerly point
        and the remaining vertices proceed in clockwise order.
        """

        def __init__(self, vertices_latlon, row_spacing):
            """Initialize the area coverage details."""

            # Expecting exactly 4 vertices
            if len(vertices_latlon) != 4:
                raise Exception('Expecting exactly 4 vertices. Received % d' % len(vertices_latlon))
            self._row_spacing = row_spacing
            self._vertices = []
            for vertex in vertices_latlon:
                self._vertices.append(vertex.toXY(SEARCH_AREA_DATUM))

        def _compute_y(p1, p2, x):
            """Compute the Y value on the line from p1 to p4 at the given x position."""
            x1 = p1.getX()
            y1 = p1.getY()
            x2 = p2.getX()
            y2 = p2.getY()
            if x1 == x2:
                y = y2
            else:
                slope = (y2 - y1) / (x2 - x1)
                y = slope * x + y1 - slope * x1
            return y

        def generatePath(self):
            """Generate the area coverage waypoints."""

            waypoints = []

            # Find the leftmost and rightmost points of the quadrilateral as they are the
            # start and stop bounds for area coverage
            smallest_x = self._vertices[0].getX()
            largest_x = smallest_x
            for vertex in self._vertices:
                x = vertex.getX()
                if x < smallest_x:
                    smallest_x = x
                if x > largest_x:
                    largest_x = x

            # Name the vertices p1, p2, p3, p4 such that p1 is the leftmost vertex and such that
            # p2, p3, p4 proceed in clockwise order from p1.
            vertex_start_index = 0
            for vertex in self._vertices:
                if vertex.getX() == smallest_x:
                    break
                vertex_start_index = vertex_start_index + 1
            p1 = self._vertices[vertex_start_index]
            p2 = self._vertices[(vertex_start_index + 1) % 4]
            p3 = self._vertices[(vertex_start_index + 2) % 4]
            p4 = self._vertices[(vertex_start_index + 3) % 4]
            x2 = p2.getX()
            x3 = p3.getX()
            x4 = p4.getX()

            rospy.loginfo('Computing waypoints for (%f, %f), (%f, %f), (%f, %f), (%f, %f)' % (
                p1.getX(), p1.getY(), p2.getX(), p2.getY(),
                p3.getX(), p3.getY(), p4.getX(), p4.getY()
            ))

            # Compute the top and bottom waypoints
            top_waypoints = []
            bottom_waypoints = []

            x = smallest_x
            while x <= largest_x:
                # Top point: 3 cases
                # x <= x2: use line P1-P2
                # x2 < x <= x3: use line P2-P3
                # x3 < x: use line P3-P4
                if x <= x2:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p1, p2, x)
                elif x <= x3:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p2, p3, x)
                else:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p3, p4, x)
                top_waypoints.append(CoordinateXY(x, y))

                # Bottom point: 3 cases
                # x <= x4: use line P1-P4
                # x4 < x <= x3: use line P4-P3
                # x3 < x: use line P3-P2
                if x <= x4:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p4, p1, x)
                elif x <= x3:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p4, p3, x)
                else:
                    y = SimpleAreaCoverage.AreaCoverageBuilder._compute_y(p3, p2, x)
                bottom_waypoints.append(CoordinateXY(x, y))

                # Move to the next row
                x = x + self._row_spacing

            # Insert top and bottom waypoints in order; avoid duplicates at beginning and end
            i = 0
            while i < len(top_waypoints):
                waypoints.append(top_waypoints[i])
                if (
                    bottom_waypoints[i].getY() != top_waypoints[i].getY() or
                    bottom_waypoints[i].getX() != top_waypoints[i].getX()
                ):  # avoid duplicates
                    waypoints.append(bottom_waypoints[i])
                i = i + 1
                if i < len(top_waypoints):
                    waypoints.append(bottom_waypoints[i])
                    if (
                        bottom_waypoints[i].getY() != top_waypoints[i].getY() or
                        bottom_waypoints[i].getX() != top_waypoints[i].getX()
                    ):  # avoid duplicates
                        waypoints.append(top_waypoints[i])
                i = i + 1

            rospy.logdebug("Waypoints X/Y: ")
            for waypoint in waypoints:
                rospy.logdebug('Waypoint: X: %f Y: %f' % (waypoint.getX(), waypoint.getY()))

            # Convert waypoints to lat/lon format
            waypoints_latlon = []
            for waypoint in waypoints:
                waypoints_latlon.append(CoordinateLatLon.fromXY(waypoint, SEARCH_AREA_DATUM))

            return waypoints_latlon

    class SimulatedScanner:
        """Simulates a hardware scanner.

        The details of what is being scanned are not covered here. This simple model simply
        returns a reading in the 0-100 range indicating the strength of the detection
        (0=lowest, 100=highest).

        The scanner can be started and stopped. When running, it publishes the most recent
        scan value once per second.
        """

        def __init__(self):
            """Sets up the ROS publisher."""

            self._publisher = rospy.Publisher(SCANNER_TOPIC, UInt8, queue_size=10)
            self._rate = rospy.Rate(1)  # 1 Hz
            self._running = False
            self._thread = None

        def start(self):
            """Start publishing scanner readings."""

            if self._running:   # already running, no need to start
                return
            self._thread = threading.Thread(target=self._publish)
            self._running = True
            self._thread.start()
            rospy.loginfo('Started simulated scanner')

        def stop(self):
            """Stop publishing scanner readings."""

            if not self._running:   # not running, so no need to stop
                return
            self._running = False
            self._thread.join()
            rospy.loginfo('Stopped simulated scanner')

        def _getNextReading(self):
            """Get the next scanner reading."""

            return random.randint(0, 100)

        def _publish(self):
            """Publish readings at the defined rate."""

            while self._running:
                self._publisher.publish(self._getNextReading())
                self._rate.sleep()

    class StartStopScannerServer:
        """Creates a ROS actionlib server to execute the start/stop custom task for the scanner."""

        def __init__(self):
            """Sets up and starts the actionlib server."""

            self._simulated_server = SimpleAreaCoverage.SimulatedScanner()
            self._action_server = actionlib.SimpleActionServer(
                    CUSTOM_ACTION_NAME,
                    UITaskAction,
                    execute_cb=self._executeCallback,
                    auto_start=False)
            self._action_server.start()

        def stop(self):
            "Stops all threads for shutdown."

            self._simulated_server.stop()

        def _executeCallback(self, goal):
            """Callback that gets executed when a start or stop message is received.

            This callback is executed on a separate actionlib thread. This example
            always calls "set_succeeded(result)": 'set_succeeded' updates the state
            of the action server so that the mission knows that the custom task was
            executed successfully; 'result' is an optional parameter that will be
            sent back to the navigation engine and should be '{ success: True }' as
            shown. To indicate a failure, use "set_preempted()" or "set_aborted()"
            instead of "set_succeeded()".

            Parameters
            ----------
            goal : UITaskActionGoal
                The parameters for the goal to be executed
            """

            # floats[0]: if True, start scanner; else stop scanner
            if goal.floats[0]:
                self._simulated_server.start()
            else:
                self._simulated_server.stop()
            # Send the action result
            result = UITaskResult()
            result.success = True
            self._action_server.set_succeeded(result)

    class RobotPositionSubscriber:
        """Monitors the current position of the robot."""

        def __init__(self, callback):
            """Subscribes for robot position updates.

            Parameters
            ----------
            callback : fn(Odometry)
                The callback function to be executed when the robot position is published.
            """

            self._sub = rospy.Subscriber("/localization/odom_throttle", Odometry, callback)

    class ScannerSubscriber:
        """Monitors the latest output of the simulated scanner."""

        def __init__(self, callback):
            """Subscribes for simulated scanner updates.

            Parameters
            ----------
            callback : fn(UInt8)
                The callback function to be executed when the scanner output is published.
            """

            self._sub = rospy.Subscriber(SCANNER_TOPIC, UInt8, callback)

    class MissionBuilder:
        """Creates the mission, including custom tasks."""

        def __init__(self):
            """Creates the mission with waypoints and custom tasks."""

            all_points = SimpleAreaCoverage.AreaCoverageBuilder(SEARCH_AREA_COORDINATES,
                                                                SEARCH_ROW_SPACING).generatePath()
            # Use the first point as the "start".
            # Use last point as the "stop".
            start_point_latlon = all_points[0]
            stop_point_latlon = all_points[-1]

            # Create the Start waypoint, with custom task to start scanning; also,
            # set the heading to point south so that the robot is pointed in the
            # right direction for the first row.
            start_task = Task()
            start_task.name = "start_scan"
            start_task.uuid = "uuid-task-1"
            start_task.action_server_name = CUSTOM_ACTION_NAME
            start_task.version = "1.0"
            start_task.floats = [1]      # 1=start
            start_waypoint = Waypoint("W_start", "uuid-waypoint-S1", start_point_latlon.getLat(), start_point_latlon.getLon(), 180, [start_task])

            # Create the Stop waypoint, with custom task to stop scanning
            stop_task = Task()
            stop_task.name = "stop_scan"
            stop_task.uuid = "uuid-task-2"
            stop_task.action_server_name = CUSTOM_ACTION_NAME
            stop_task.version = "1.0"
            stop_task.floats = [0]      # 0=stop
            stop_waypoint = Waypoint("W_stop", "uuid-waypoint-S2", stop_point_latlon.getLat(), stop_point_latlon.getLon(), 180, [stop_task])

            # Build the full waypoint list
            # Note: Inserting a dummy waypoint at the start (with no task) to
            # temporarily work around a bug where tasks are not supported on
            # the first waypoint
            temp_start_waypoint = Waypoint("W_start_temp", "uuid-waypoint-S1-temp",
                                      start_point_latlon.getLat() + 0.000001,
                                      start_point_latlon.getLon() + 0.000001)
            waypoints = [temp_start_waypoint, start_waypoint]
            if len(all_points) == 2:
                waypoints.append(stop_waypoint)
            else:
                i = 0
                for waypoint_latlon in all_points[1:-1]:
                    waypoints.append(Waypoint("W%d" % i, "uuid-waypoint-%d" % i, waypoint_latlon.getLat(), waypoint_latlon.getLon(), -1))
                    i = i + 1
                waypoints.append(stop_waypoint)

            # Build mission from two waypoints with custom tasks
            self._mission = Mission("Area coverage mission", "uuid-mission-1", waypoints)

        def getMission(self):
            """Gets a reference to the mission.

            Returns
            -------
            A reference to the mission.
            """
            return self._mission

    def __init__(self):
        """Initializes ROS, the custom task server, subscribers and mission."""

        RosNode.__init__(self, 'simple_area_coverage')
        self._robot_position_lock = Lock()
        self._scanner_results = []
        self._start_stop_scanner = SimpleAreaCoverage.StartStopScannerServer()
        self._robot_position_subscriber = SimpleAreaCoverage.RobotPositionSubscriber(
            self._robotPositionSubscriberCallback)
        self._scanner_subscriber = SimpleAreaCoverage.ScannerSubscriber(
            self._scannerSubscriberCallback)
        self._mission_builder = SimpleAreaCoverage.MissionBuilder()
        self._robot_position = CoordinateLatLon(0.0, 0.0)

    def _robotPositionSubscriberCallback(self, msg):
        """Callback that is executed when the subscriber reports robot position updates.

        Parameters
        ----------
        msg : Odometry
            Contains the updated robot latitude and longitude.
        """

        with self._robot_position_lock:
            coord_xy = CoordinateXY(msg.pose.pose.position.x, msg.pose.pose.position.y)
            self._robot_position = CoordinateLatLon.fromXY(coord_xy, SEARCH_AREA_DATUM)

    def _scannerSubscriberCallback(self, msg):
        """Callback that is executed when the subscriber reports scanner values.

        Parameters
        ----------
        msg : UInt8
            Contains the latest scanner reading.
        """

        # If the reading meets the threshold, save it
        if msg.data < SCANNER_MINIMUM_REPORTING_THRESHOLD:
            return
        # Get the most recent robot position so it can be recorded with the scanner value;
        # use the lock since it is being updated from a separate thread
        robot_position = None
        with self._robot_position_lock:
            robot_position = self._robot_position
        # Update the list of results
        self._scanner_results.append((robot_position, msg.data))
        rospy.loginfo('Adding result: %u at (%f, %f)' % (
            msg.data, robot_position.getLat(), robot_position.getLon()))

    def run(self):
        """Execute the mission.

        This function blocks until the mission is complete.

        Returns
        -------
        The (status, results) tuple where:
           status: True on successful mission execution, False on any error
           results: list of scanner detections above the threshold; empty list on error.
        """

        if not self._mission_builder.getMission().startMission():
            return (False, [])
        while not self._mission_builder.getMission().isMissionComplete():
            time.sleep(1.0)
        self._start_stop_scanner.stop()  # Stop the threads
        return (self._mission_builder.getMission().getMissionSuccess(), self._scanner_results)


if __name__ == '__main__':
    (success, results) = SimpleAreaCoverage().run()
    if success:
        print("Mission completed successfully. Scanner hits:")
    else:
        print("Mission failed")
    for (coord_latlon, scanner_value) in results:
        print('Scanner reading %u at Lat: %f Lon: %f' % (
            scanner_value, coord_latlon.getLat(), coord_latlon.getLon()))
    rospy.signal_shutdown('Done')
