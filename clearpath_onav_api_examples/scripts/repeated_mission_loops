#! /usr/bin/env python3

from clearpath_onav_api_examples_lib.ros_node import RosNode
from clearpath_onav_api_examples_lib.yaml_config import YamlConfig
from sensor_msgs.msg import BatteryState
from datetime import datetime
import os
import random
import rospy
import rosnode
import signal
import subprocess
import time


# Read in missions from files (1 mission per file), select the next mission
# randomly, and run it. Repeat until the battery level is low. Record key
# mission data to files. Record a rosbag.
#
# Generally assume that each mission is a loop and that the start/end points
#   are the same for each mission, but with different paths.
#
# Future improvements:
# 1. Read in a dock location and go charge before a mission if battery is low.
# 2. Push the results directly to the cloud at the end of a run.


class MissionData:
    """Track the key data of the current mission."""

    def __init__(self, output_dir):
        """Initialize mission parameters."""

        self._output_dir = output_dir
        self._start_time_filename = output_dir + '/start-time'
        self._end_time_filename = output_dir + '/end-time'
        self._mission_name_filename = output_dir + '/mission-name'
        self._mission_status_filename = output_dir + '/mission-status'

    def recordMissionStart(self, mission_name):
        "Write out the current time as the mission start time."""
        with open(self._mission_name_filename, 'w') as f:
            f.write(mission_name)
        with open(self._mission_status_filename, 'w') as f:
            f.write('IN_PROGRESS')
        with open(self._start_time_filename, 'w') as f:
            f.write(datetime.now().strftime("%Y%m%dT%H%M%S"))

    def recordMissionEnd(self, success):
        "Write out the current time as the mission end time."""
        with open(self._mission_status_filename, 'w') as f:
            if success:
                f.write('PASS')
            else:
                f.write('FAIL')
        with open(self._end_time_filename, 'w') as f:
            f.write(datetime.now().strftime("%Y%m%dT%H%M%S"))


class RosbagRecorder():
    """Used to start/stop rosbag recording."""

    def __init__(self, output_dir):
        """Initialize rosbag recording parameters."""

        self._process = None
        self._recording = False
        self._output_dir = output_dir
        self._topics = rospy.get_param('/repeated_mission_loops/rosbag_topics', [])
        if not self._topics:
            rospy.logerr('No rosbag topics specified.')
        self._command = ['rosrun', 'rosbag', 'record', '-e'] + self._topics + ['__name:=rosbag_recorder_1']
        rospy.loginfo('Rosbag Recorder Started')

    def startRecording(self):
        """Start recording the rosbag."""

        if self._recording:
            rospy.logerr('Already recording rosbag; start failed')
            return False

        self._process = subprocess.Popen(self._command, cwd=self._output_dir)
        self._recording = True
        rospy.loginfo('Started rosbag recorder, PID %s' % self._process.pid)
        return True

    def stopRecording(self):
        """Stop recording the rosbag."""

        if not self._recording:
            rospy.logerr('Not recording rosbag; stop failed')
            return False
        rosnode.kill_nodes(['/rosbag_recorder_1'])
        self._process = None
        self._recording = False
        rospy.loginfo('Stopped rosbag recorder')
        return True


class RepeatedMissionLoops(RosNode):
    """Create and run a missions loaded from YAML configuration files repeatedly."""

    def __init__(self):
        """Initialize the mission details and server connection."""

        RosNode.__init__(self, 'repeated_mission_loops')
        self._output_dir_base = '/home/administrator/mission_data/'
        if not os.path.exists(self._output_dir_base):
            os.makedirs(self._output_dir_base)
        self._missions = []
        mission_filenames = rospy.get_param('/repeated_mission_loops/mission_files', [])
        for mission_filename in mission_filenames:
            self._missions.append(YamlConfig.yamlFileToMission(mission_filename))
        if len(self._missions) == 0:
            rospy.logerr('No missions loaded.')
        self._battery_percentage = 0.5
        self._battery_sub = rospy.Subscriber("/onboard_systems/bms_0/state",
                BatteryState, self._batterySubcriberCallback)

    def _batterySubcriberCallback(self, msg):
        """Callback function for updating battery state."""

        self._battery_percentage = msg.percentage

    def _isBatteryLevelOk(self):
        """Check the battery level and see if it is above the threshold to run further."""
        if self._battery_percentage > 0.2:
            return True
        return False

    @staticmethod
    def _sigintHandler(signum, frame):
        rospy.signal_shutdown('Received SIGINT')

    def run(self):
        """Execute the missions."""

        signal.signal(signal.SIGINT, RepeatedMissionLoops._sigintHandler)

        while self._isBatteryLevelOk():
            # Randomly choose a mission from among the available missions and run it
            current_mission = self._missions[random.randrange(len(self._missions))]
            mission_dir = self._output_dir_base + datetime.now().strftime("%Y%m%dT%H%M%S")
            if not os.path.exists(mission_dir):
                os.makedirs(mission_dir)
            mission_data = MissionData(mission_dir)
            mission_data.recordMissionStart(current_mission.getName())
            rosbag_recorder = RosbagRecorder(mission_dir)
            rosbag_recorder.startRecording()
            if current_mission.startMission():
                rospy.loginfo('Started mission %s' % current_mission.getName())
                while not current_mission.isMissionComplete():
                     time.sleep(5.0)
                success = current_mission.getMissionSuccess()
                rosbag_recorder.stopRecording()
                rospy.loginfo('Completed mission %s, success = %s' % (current_mission.getName(), success))
                mission_data.recordMissionEnd(success)
            else:
                rosbag_recorder.stopRecording()
                rospy.logerr('Failed to start mission %s' % current_mission.getName())
                mission_data.recordMissionEnd(False)
        rospy.loginfo('Battery level is low (%f). Ending missions.' % self._battery_percentage)
        return True


if __name__ == '__main__':
    if RepeatedMissionLoops().run():
        print("Missions completed successfully")
    else:
        print("Missions failed")
